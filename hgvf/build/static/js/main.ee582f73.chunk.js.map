{"version":3,"sources":["history.js","components/Menu.js","components/Header.js","components/Home.js","components/About.js","components/Contact.js","routes.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","Menu","react_default","a","createElement","className","Link","to","Menu_Submenu","Submenu","Component","Header","props","title","subtitle","Menu_Menu","defaultProps","Home","About","Contact","routes","path","exact","content","Content","map","route","index","Route","key","component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","renderComponent","BrowserRouter","basename","history","Fragment","components_Header","components_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee582f73.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';  // Link tells BrowserRouter to change the URL\n\nconst Menu = () => (\n  <nav >\n    <ul className=\"nav__menu\">\n      <li className=\"nav__menu-item\">\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li className=\"nav__menu-item\">\n        <Link to=\"/about\">About</Link>\n        <Submenu />\n      </li>\n      <Link className=\"nav__menu-item\" to=\"/contact\">Contact</Link>\n    </ul>\n  </nav>\n)\n\nclass Submenu extends Component {\n  render() {\n    return (\n      <ul className=\"nav__submenu\">\n        <li className=\"nav__submenu-item \">\n          <Link to=\"/project\">This Project</Link>\n        </li>\n        <li className=\"nav__submenu-item \">\n          <Link to=\"/hanalei\">Why Hanalei</Link>\n        </li>\n        <li className=\"nav__submenu-item \">\n          <Link to=\"/jobs\">Jobs</Link>\n        </li>\n      </ul>\n    )\n  }\n}\n\nexport { Menu, Submenu }","import React from 'react';\nimport { Menu, Submenu } from './Menu'\n\nconst Header = (props) => (\n  <div className=\"header\">\n    <div className=\"container\">\n      <h1 className=\"header__title\">{props.title}</h1>\n      {props.subtitle && <h2 className=\"header__subtitle\">{props.subtitle}</h2>}\n      <Menu>\n        <Submenu />\n      </Menu>\n    </div>\n  </div>\n)\n\nHeader.defaultProps = {\n  title: 'Hanalei Group Vacation Finder',\n  subtitle: \"Large Group Vacation Rentals in the land called Hanalei\"\n}\n\n\nexport default Header","import React from 'react';\n\nconst Home = (props) => (\n    <div className=\"home\">\n      <div className=\"container\">\n        <h1>HOME</h1>\n      </div>\n    </div>\n  )\n\nexport default Home","import React from 'react';\n\nconst About = (props) => (\n    <div className=\"about\">\n      <div className=\"container\">\n      <h1>ABOUT</h1>\n      </div>\n    </div>\n  )\n\nexport default About","import React from 'react';\n\nconst Contact = (props) => (\n    <div className=\"contact\">\n      <div className=\"container\">\n        <h1 className=\"contact_title\">{props.title}</h1>\n        <p>This will be the contact form</p>\n      </div>\n    </div>\n  )\n\nContact.defaultProps = {\n  title: 'Contact Form',\n  subtitle: \"Large Group Vacation Rentals in the land called Hanalei\"\n}\n\n\nexport default Contact","import Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    content: Home\n  },\n  {\n    path: \"/About\",\n    content: About\n  },\n  {\n    path: \"/Contact\",\n    content: Contact\n  }\n]\n\nexport default routes","import React from 'react';\nimport { Route } from 'react-router-dom';  // Route listens to BrowserRouter for which of the components to display in the content component\nimport routes from '../routes'\n\nconst Content = (props) => (\n  <div className=\"content\">\n    {routes.map((route,index) => (\n      <Route \n        key={index}\n        path={route.path}\n        exact={route.exact}\n        component={route.content}\n      />\n    ))}\n  </div>\n)\n\nexport default Content","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom'; //listens for URL change\nimport history from './history'\n\nimport './App.css';\nimport Header from './components/Header'\nimport Content from './components/Content'\nimport './styles/styles.scss'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      renderComponent: ''\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n      <BrowserRouter \n      basename={\"/\"} \n      history={history}\n      >\n        <React.Fragment>\n          <Header />\n          <Content /> \n        </React.Fragment>\n      </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}